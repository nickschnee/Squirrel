## points
points(y = 15:25, x = rep(40, times = 11), cex = 0.5)
## control functions ##
## par()
par(mfrow = c(1, 2))
plot(y = 1:8, x = 1:8, col = 1:8, pch  = 16) ## 8 default colours
plot(1:19, 1:19, pch = 1:19, col = 1:19) ## 19 pchs
##
par(mfrow = c(2, 1))
plot(y = 1:8, x = 1:8, col = 1:8, pch  = 16)
plot(1:19, 1:19, pch = 1:19, col = 1:19)
##
par(mfrow = c(3, 2))
plot(y = 1:8, x = 1:8, col = 1:8, pch  = 16)
plot(1:19, 1:19, pch = 1:19, col = 1:19)
boxplot(Petal.Length ~ Species, data = iris)
## get back to default values
dev.off()
## par() to control "global" parameters
par("pch")
par(pch = 4)
plot(y = 1:8, x = 1:8)
## all graphical parameters
par()
graphical.parameters <- par()
head(graphical.parameters)
str(graphical.parameters)
## device control functions
pdf(file = "../Testing_ThePdfFunction.pdf")
plot(1:10, 1:10, main = "test")
abline(v = 5)
dev.off()
## remember...the working directory
getwd()
## interactive functions ##
## identify
plot(Agriculture ~ Fertility, data = swiss)
identify(y = swiss$Agriculture, x = swiss$Fertility)
## click on "finish" icon
swiss[c(46,19,7), ]
## locator
plot(1:10, 1:10, col = 1:10)
locator()
## panelling with base-R graphical functions
head(Loblolly,  n = 8)
levels(Loblolly$Seed)
nlevels(Loblolly$Seed)
##
table(Loblolly$Seed)
##
plot(height ~ age, data = Loblolly)
##
plot(height ~ age, data = Loblolly,
col = Seed)
## we can't really distinguish the different "Seed" on this graph
##
par(mfrow = c(2, 2))
plot(height ~ age, data = Loblolly,
subset = Seed == levels(Loblolly$Seed)[1],
main = paste("Seed", levels(Loblolly$Seed)[1]))
plot(height ~ age, data = Loblolly,
subset = Seed == levels(Loblolly$Seed)[2],
main = paste("Seed", levels(Loblolly$Seed)[2]))
plot(height ~ age, data = Loblolly,
subset = Seed == levels(Loblolly$Seed)[3],
main = paste("Seed", levels(Loblolly$Seed)[3]))
plot(height ~ age, data = Loblolly,
subset = Seed == levels(Loblolly$Seed)[4],
main = paste("Seed", levels(Loblolly$Seed)[4]))
plot(height ~ age, data = Loblolly,
subset = Seed == levels(Loblolly$Seed)[5],
main = paste("Seed", levels(Loblolly$Seed)[5]))
plot(height ~ age, data = Loblolly,
subset = Seed == levels(Loblolly$Seed)[6],
main = paste("Seed", levels(Loblolly$Seed)[6]))
plot(height ~ age, data = Loblolly,
subset = Seed == levels(Loblolly$Seed)[7],
main = paste("Seed", levels(Loblolly$Seed)[7]))
plot(height ~ age, data = Loblolly,
subset = Seed == levels(Loblolly$Seed)[8],
main = paste("Seed", levels(Loblolly$Seed)[8]))
plot(height ~ age, data = Loblolly,
subset = Seed == levels(Loblolly$Seed)[9],
main = paste("Seed", levels(Loblolly$Seed)[9]))
plot(height ~ age, data = Loblolly,
subset = Seed == levels(Loblolly$Seed)[10],
main = paste("Seed", levels(Loblolly$Seed)[10]))
plot(height ~ age, data = Loblolly,
subset = Seed == levels(Loblolly$Seed)[10],
main = paste("Seed", levels(Loblolly$Seed)[10]))
plot(height ~ age, data = Loblolly,
subset = Seed == levels(Loblolly$Seed)[12],
main = paste("Seed", levels(Loblolly$Seed)[12]))
plot(height ~ age, data = Loblolly,
subset = Seed == levels(Loblolly$Seed)[13],
main = paste("Seed", levels(Loblolly$Seed)[13]))
plot(height ~ age, data = Loblolly,
subset = Seed == levels(Loblolly$Seed)[14],
main = paste("Seed", levels(Loblolly$Seed)[14]))
## {lattice} ##
library(lattice)
xyplot(height ~ age | Seed, data = Loblolly)
## {ggplot2} ##
library(ggplot2)
qplot(y = height, x = age, data = Loblolly, facets = ~ Seed)
## {lattice} ##
## i) panelling
xyplot(height ~ age | Seed, data = Loblolly)
## ii) grouping
xyplot(height ~ age, groups = Seed, data = Loblolly)
xyplot(height ~ age, groups = Seed, data = Loblolly,
type = "b")
## iii) adding summary statistics
xyplot(height ~ age, data = Loblolly,
type = c("p", "r"))
xyplot(height ~ age, data = Loblolly,
type = c("p", "smooth"))
xyplot(height ~ age, data = Loblolly,
type = c("p", "smooth", "g"))
setwd("C:/Users/luana/switchdrive/HS22/R Bootcamp/Instruction material/Exercises")
## {lattice} ##
## i) panelling
xyplot(height ~ age | Seed, data = Loblolly)
## ii) grouping
xyplot(height ~ age, groups = Seed, data = Loblolly)
xyplot(height ~ age, groups = Seed, data = Loblolly,
type = "b")
## iii) adding summary statistics
xyplot(height ~ age, data = Loblolly,
type = c("p", "r"))
xyplot(height ~ age, data = Loblolly,
type = c("p", "smooth"))
xyplot(height ~ age, data = Loblolly,
type = c("p", "smooth", "g"))
## {ggplot2}
## base call ggplot()
ggplot(data = Loblolly,
mapping = aes(y = height,
x = age)) +
geom_point()
## i) panelling
ggplot(data = Loblolly,
mapping = aes(y = height,
x = age)) +
geom_point() +
facet_wrap(~ Seed) ## !
str(iris)
library(ggplot2)
library(scales)
library(ggthemes)
p <- ggplot(data = iris,
aes(x = Petal.Width / Petal.Length,
y = Sepal.Width / Sepal.Length,
colour = Species)) +
geom_smooth(aes(group = Species),
method = 'lm', se = FALSE) +
geom_point(alpha = 0.5) +
facet_wrap(~Species) +
ggtitle('Iris ratios') +
scale_color_brewer(type = 'qual', palette = 'Set1') +
# scale_x_continuous('Petal W:L ratio',
#                    limits = c(0, NA),
#                    labels = percent,
#                    breaks = c(0, .2, .4)) +
scale_x_log10('Petal W:L ratio') +
scale_y_continuous('Sepal W:L ratio',
limits = c(0, NA),
labels = percent) +
theme_minimal() +
theme(legend.position = 'bottom',
axis.text.x = element_text(angle = 60, hjust = 1))
p
library(plotly)
ggplotly(p)
for hect in range(0:len(squirrels$Hectare)):
for hect in range(0:len(squirrels$Hectare)):
# Plot map
ggmap(mad_map) +
geom_point(data = s.locations,
aes(x = Longitude, y = Latitude),
color = "blue") +
labs(x = "Longitude", y = "Latitude")
setwd("C:/Users/luana/switchdrive/HS22/R Bootcamp/GitHub/Squirrel")
squirrels <- read.csv("joint_squirrels.csv")
t.test(squirrels$Above.Ground.Sighter.Measurement, squirrels$temperature_celsius)
# Load the stringr library
library(stringr)
# Read the csv files into dataframes
hectare <- read.csv("2018_Central_Park_Squirrel_Census_-_Hectare_Data.csv")
squirrels <- read.csv("2018_Central_Park_Squirrel_Census_-_Squirrel_Data.csv")
# Convert to lowercase
weather <- tolower(hectare$Sighter.Observed.Weather.Data)
# temperature
# temperature
# temperature
# temperature
# temperature
# temperature
fahrenheit_to_celsius <- function(x) {
if(!is.na(x)){
(x - 32) * 5/9
} else {
NA
}
}
# get all temperatures using this function and regex
temp_fahrenheit <- as.numeric(str_extract(weather, "\\d+"))
temp_fahrenheit
# convert to celsius, if is not NA and then round to one decimal
temp_celsius <- round(sapply(temp_fahrenheit, fahrenheit_to_celsius), 1)
temp_celsius
hectare$temperature_fahrenheit <- temp_fahrenheit
hectare$temperature_celsius <- temp_celsius
write.csv(hectare, "hectare_temperature.csv")
# temperature END
# temperature END
# temperature END
# temperature END
# temperature END
# temperature END
# weather conditions extraction
# weather conditions extraction
# weather conditions extraction
# make a list of all different weather conditions
weather_split <- str_split(weather, ",")
str_split(weather, ",", simplify = TRUE)
# find all unique weather conditions
unique_weather <- str_trim(unique(unlist(weather_split)))
unique_weather
# make a table with all unique values, without values with numbers (temperatures)
weather_no_numbers <- str_trim(unlist(weather_split), side = "both")[!str_detect(str_trim(unlist(weather_split), side = "both"), "\\d")]
sort(table(weather_no_numbers), ascending = TRUE)
# get unique values where sun appears
# table(unique_weather[grepl(pattern = "sun", x = unique_weather)])
# END weather conditions extraction
# END weather conditions extraction
# END weather conditions extraction
# START making new columns for groups of weather conditions
# START making new columns for groups of weather conditions
# START making new columns for groups of weather conditions
# START making new columns for groups of weather conditions
# sun:      sun(ny), clear, bright, blue, pleasant, perfect, not a cloud, nice, fair, crisp
# clouds:   overcast, cloud(y), dreary (trostlos), gray, !not a cloud
# drizzle:  light rain, drizzle, drizzling, drizzly, sprink(ling), lite rain, couple drops of rain, a few raindrops
# rain:     rain, rainy, wet, showers, !lite rain, !light rain drops, !couple drops of rain, !a few raindrops
# wind:     wind(y), breez(e), brisk, gusty, !no wind
# fog:      foggy, mist(y)
# humid:    humid, muggy, damp, moist
# temp:     cool, chilly, cold, warm, dewy, dewpoint, mild
# other:    artsy lighting, got dark very suddenly, shady, sun starting to go down
# no-wind:  calm, no wind
# Split the lowercase weather data by ","
weather_split <- str_split(weather, ",")
# Check the results of the split
weather_split
#words_temp <- c("cool", "chilly", "cold", "warm", "dewy", "dewpoint", "mild")
#words_other <- c("artsy lighting", "got dark very suddenly", "shady", "sun starting to go down")
#words_nowind <- c("calm", "no wind")
detect_weather <- function(x, words_positive, words_negative = character(0)) {
detect <- any(str_detect(x, paste(words_positive, collapse = "|")))
if (detect == TRUE && length(words_negative) > 0) {
not_detect <- any(str_detect(x, paste(words_negative, collapse = "|")))
if (not_detect == TRUE) {
detect <- FALSE
}
}
detect
}
# sun
words_sun <- c("sun", "clear", "bright", "blue", "pleasant", "perfect", "not a cloud", "nice", "fair", "crisp")
words_not_sun <- c("sonnelein")
sunny <- sapply(weather_split, function(x) detect_weather(x, words_sun, words_not_sun))
sunny
# rain
words_rain <- c("rain", "wet", "shower")
words_not_rain <- c("lite rain", "drop", "light rain")
rainy <- sapply(weather_split, function(x) detect_weather(x, words_rain, words_not_rain))
rainy
# clouds
words_clouds <- c("overcast", "cloud", "drear", "gray")
words_not_clouds <- ("not a cloud")
cloudy <- sapply(weather_split, function(x) detect_weather(x, words_clouds, words_not_clouds))
cloudy
# wind
words_wind <- c("wind", "breez", "brisk", "gusty")
windy <- sapply(weather_split, function(x) detect_weather(x, words_wind))
windy
# drizzle
words_drizzle <- c("light rain", "drizzle", "drizzling", "drizzly", "sprink", "lite rain", "couple drops of rain", "a few raindrops")
drizzly <- sapply(weather_split, function(x) detect_weather(x, words_drizzle))
drizzly
# fog
words_fog <- c("fog", "mist")
foggy <- sapply(weather_split, function(x) detect_weather(x, words_fog))
foggy
# humid
words_humid <- c("humid", "muggy", "damp", "moist")
humid <- sapply(weather_split, function(x) detect_weather(x, words_humid))
humid
hectare$sunny <- as.logical(sunny)
hectare$rainy <- as.logical(rainy)
hectare$cloudy <- as.logical(cloudy)
hectare$windy <- as.logical(windy)
hectare$drizzly <- as.logical(drizzly)
hectare$foggy <- as.logical(foggy)
hectare$humid <- as.logical(humid)
# END making new columns for groups of weather conditions
# END making new columns for groups of weather conditions
# END making new columns for groups of weather conditions
# END making new columns for groups of weather conditions
# Write the modified dataframe to a new csv file
write.csv(hectare, "hectare_weather.csv")
# Join datasets based on hectare, time of day and date
joint <- merge(squirrels, hectare, by=c("Hectare", "Shift", "Date"))
# write the joint dataframe to a new csv file
write.csv(joint, "joint_squirrels.csv")
write.csv(hectare, "hectare_weather.csv")
###########################
# DESCRIPTIVE STATISTICS
###########################
summary(joint)
# Number of squirrel sightings per hectare
plot(squirrels$Hectare.Squirrel.Number ~ squirrels$Hectare, main = "Squirrel Sightings per Hectare", ylab = "squirrels", xlab = "hectare")
#
#distance between terms
#adist("partly sunny", "sunny")
# regex look for temp
#grepl(pattern = "[0-9]+° F", weather)
View(joint)
squirrels <- read.csv("joint_squirrels.csv")
t.test(squirrels$sunny)
sun <- t.test(squirrels$sunny)
plot(sun)
hist(sun)
print(sun)
plot(sun)
hectare
hect <- read.csv("2018_Central_Park_Squirrel_Census_-_Hectare_Data.csv")
View(hect)
read.csv("hectare_weather.csv")
weather <- read.csv("hectare_weather.csv")
View(weather)
# Load the necessary packages
library(tidyverse)
# Fit the GLM model
model <- glm(weather$Number.of.Squirrels ~ weather$Hectare, weather$Date, weather$Shift
family = poisson())
# Fit the GLM model
model <- glm(weather$Number.of.Squirrels ~ weather$Hectare, weather$Date, weather$Shift,
family = poisson())
# Fit the GLM model
model <- glm(Number.of.Squirrels ~ Hectare, Date, Shift,
data = weather
family = poisson())
# Fit the GLM model
model <- glm(Number.of.Squirrels ~ Hectare, Date, Shift,
data = "weather",
family = poisson())
weather <- read.csv("hectare_weather.csv")
# Fit the GLM model
model <- glm(Number.of.Squirrels ~ Hectare, Date, Shift,
data = "weather",
family = poisson())
# Fit the GLM model
model <- glm(Number.of.Squirrels ~ Hectare + Date + Shift,
data = weather,
family = poisson())
# Summarize the model
summary(model)
# Fit the GLM model
model <- glm(Number.of.Squirrels ~ Date + Shift,
data = weather,
family = poisson())
# Summarize the model
summary(model)
count(weather$Shift==PM)
weather$Shift==PM
weather$Shift=="PM"
count()
table(weather$Shift)
table(weather$Litter)
table(weather$Date)
table(weather$sunny)
table(weather$rainy)
table(weather$cloudy)
table(weather$foggy)
tabe(weather$humid)
table(weather$humid)
table(weather$drizzly)
# Fit the GLM model
model <- glm(Number.of.Squirrels ~ sunny + drizzly + cloudy + foggy + rainy + humid,
data = weather,
family = poisson())
# Summarize the model
summary(model)
# Fit the GLM model
model <- glm(Number.of.Squirrels ~ sunny + drizzly + cloudy + foggy + rainy + humid + Shift,
data = weather,
family = poisson())
# Summarize the model
summary(model)
# Fit the GLM model
model <- glm(Number.of.Squirrels ~ sunny + drizzly + cloudy + foggy + rainy + humid + Shift + Litter + Hectare.Conditions,
data = weather,
family = poisson())
# Summarize the model
summary(model)
# Fit the GLM model
model <- glm(Number.of.Squirrels ~ sunny + drizzly + cloudy + foggy + rainy + humid + Shift + Hectare.Conditions,
data = weather,
family = poisson())
# Fit the GLM model
model <- glm(Number.of.Squirrels ~ sunny + drizzly + cloudy + foggy + rainy + humid + Shift + Hectare.Conditions + temperature_celsius,
data = weather,
family = poisson())
# Summarize the model
summary(model)
reg <- lm(Number.of.Squirrels ~ temperature_celsius * Shift, data = weather)
summary(reg)
reg <- glm(Number.of.Squirrels ~ temperature_celsius * Shift, data = weather, family = poisson())
summary(reg)
reg <- glm(Number.of.Squirrels ~ temperature_celsius * Shift *Hectare.conditions, data = weather, family = poisson())
reg <- glm(Number.of.Squirrels ~ temperature_celsius * Shift * Hectare.conditions, data = weather, family = poisson())
reg <- glm(Number.of.Squirrels ~ temperature_celsius * Shift * Hectare.Conditions, data = weather, family = poisson())
summary(reg)
reg <- glm(Number.of.Squirrels ~ temperature_celsius * Shift, data = weather, family = poisson())
summary(reg)
betrieb <- glm(Number.of.Squirrels ~ sunny * Hectare.conditions, data = weather, family = poisson())
betrieb <- glm(Number.of.Squirrels ~ sunny * Hectare.Conditions, data = weather, family = poisson())
summary(betrieb)
reg <- glm(Number.of.Squirrels ~ temperature_celsius * Shift, data = weather, family = poisson())
summary(reg)
reg <- glm(Number.of.Squirrels ~ temperature_celsius * Shift * Hectare.Conditions, data = weather, family = poisson())
summary(reg)
squirrels <- read.csv("joint_squirrels.csv")
weather <- read.csv("hectare_weather.csv")
'''
GLM with date and shift
'''
# Load the necessary packages
library(tidyverse)
# Load the necessary packages
library(tidyverse)
# Load the necessary packages
install.packages(tidyverse)
# Load the necessary packages
library(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
# Load the necessary packages
library(tidyverse)
# Fit the GLM model
model <- glm(Number.of.Squirrels ~ Date + Shift,
data = weather,
family = poisson())
# Summarize the model
summary(model)
'''
oVERVIEW OVER THE NUMBER OF OCCURRENCES OF THE DIFFERENT WEATHER CONDIITONS (AND OTHER THINGS)
'''
table(weather$Litter)
'''
USEFUL:  Generalized Linear Model (GLM) with a Poisson distribution
The results obtained from the Poisson regression model show the relationship between the number of squirrels and the weather conditions.
The model estimates the expected log count of squirrels as a linear combination of the predictor variables. The estimated coefficients indicate the effect of each predictor variable on the response variable while holding all other predictors constant. The standard errors of the coefficients indicate the uncertainty in the estimates.
'''
# Fit the GLM model
model <- glm(Number.of.Squirrels ~ sunny + drizzly + cloudy + foggy + rainy + humid,
data = weather,
family = poisson())
summary(model)
'''
According to the results, the presence of rainy weather significantly decreases the expected number of squirrels, while the presence of drizzly and humid weather significantly increases the expected number of squirrels. The presence of sunny weather has a small, but not significant, negative effect on the expected number of squirrels. The presence of cloudy and foggy weather does not have a significant effect on the expected number of squirrels.
The residual deviance of 2066.5 on 693 degrees of freedom indicates that the model fits the data well, as the residual deviance is smaller than the null deviance. The AIC of 4069.7 also suggests that the model is a good fit to the data.
Overall, these results suggest that the number of squirrels observed in Central Park may be influenced by the weather conditions, particularly the presence of rainy, drizzly, and humid weather.
'''
'''
LINEAR REGRESSION WITH WEATHER CONDITIONS, SHIFT, HECTARE CONDITIONS AND TEMPERATURE
'''
# Fit the GLM model
model <- glm(Number.of.Squirrels ~ sunny + drizzly + cloudy + foggy + rainy + humid + Shift + Hectare.Conditions + temperature_celsius,
data = weather,
family = poisson())
library(osmdata)
library(sf)
library(ggmap)
squirrels <- read.csv("joint_squirrels.csv")
# first five features
head(available_features())
longitude_min <- min(squirrels$X) - 0.005
latitude_min <- min(squirrels$Y) - 0.001
longitude_max <- max(squirrels$X) + 0.005
latitude_max <- max(squirrels$Y) + 0.001
# Background map
mad_map <- get_map(location = c(left = longitude_min, bottom = latitude_min, right = longitude_max, top = latitude_max),
source = "stamen",
maptype = "toner-background",
zoom = 15,
cache = TRUE)
# Some points
d.stations <- data.frame(Latitude = squirrels$Y,
Longitude = squirrels$X)
# Plot map
ggmap(mad_map) +
geom_point(data = squirrels,
aes(x = X, y = Y, color = sunny),
) +
theme(legend.position = "none") +
labs(x = "Longitude", y = "Latitude")
# get number of distinct values
library(dplyr)
n_distinct(squirrels$Hectare)
